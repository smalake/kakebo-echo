// Package openapi provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package openapi

import (
	"fmt"
	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/labstack/echo/v4"
	"net/http"
)

// AllEvent defines model for AllEvent.
type AllEvent struct {
	Amount    *int    `json:"amount,omitempty"`
	Category  *int    `json:"category,omitempty"`
	Date      *string `json:"date,omitempty"`
	Id        *int    `json:"id,omitempty"`
	StoreName *string `json:"storeName,omitempty"`
}

// AllPattern defines model for AllPattern.
type AllPattern struct {
	Category  *int    `json:"category,omitempty"`
	Id        *int    `json:"id,omitempty"`
	StoreName *string `json:"storeName,omitempty"`
}

// AuthCode defines model for AuthCode.
type AuthCode struct {
	Code  int    `json:"code"`
	Email string `json:"email"`
}

// AuthGoogle defines model for AuthGoogle.
type AuthGoogle struct {
	Mail string `json:"mail"`
}

// AuthMail defines model for AuthMail.
type AuthMail struct {
	Mail     string `json:"mail"`
	Password string `json:"password"`
}

// CreateEvent defines model for CreateEvent.
type CreateEvent struct {
	Amount1   int     `json:"amount1"`
	Amount2   *int    `json:"amount2,omitempty"`
	Category1 int     `json:"category1"`
	Category2 *int    `json:"category2,omitempty"`
	Date      string  `json:"date"`
	Memo1     string  `json:"memo1"`
	Memo2     *string `json:"memo2,omitempty"`
	StoreName *int    `json:"storeName,omitempty"`
}

// Error defines model for Error.
type Error struct {
	Error *string `json:"error,omitempty"`
}

// EventId defines model for EventId.
type EventId struct {
	EventId *int `json:"eventId,omitempty"`
}

// IsParent defines model for IsParent.
type IsParent struct {
	Description *string `json:"description,omitempty"`
	Email       *string `json:"email,omitempty"`
	Name        *string `json:"name,omitempty"`
}

// JWT defines model for JWT.
type JWT struct {
	Token *string `json:"token,omitempty"`
}

// OneEvent defines model for OneEvent.
type OneEvent struct {
	Amount     *int    `json:"amount,omitempty"`
	Category   *int    `json:"category,omitempty"`
	CreateUser *string `json:"createUser,omitempty"`
	CreatedAt  *string `json:"createdAt,omitempty"`
	Date       *string `json:"date,omitempty"`
	Memo       *string `json:"memo,omitempty"`
	StoreName  *string `json:"storeName,omitempty"`
	UpdateUser *string `json:"updateUser,omitempty"`
	UpdatedAt  *string `json:"updatedAt,omitempty"`
}

// ParentName defines model for ParentName.
type ParentName struct {
	Name *string `json:"name,omitempty"`
}

// Pattern defines model for Pattern.
type Pattern struct {
	Category  int    `json:"category"`
	StoreName string `json:"storeName"`
}

// Register defines model for Register.
type Register struct {
	Mail     string `json:"mail"`
	Name     string `json:"name"`
	Password string `json:"password"`
	Type     int    `json:"type"`
}

// Revision defines model for Revision.
type Revision struct {
	Revision *int `json:"revision,omitempty"`
}

// SendMail defines model for SendMail.
type SendMail struct {
	Parent *bool `json:"parent,omitempty"`
}

// UpdateEvent defines model for UpdateEvent.
type UpdateEvent struct {
	Amount    int    `json:"amount"`
	Category  int    `json:"category"`
	Date      string `json:"date"`
	Memo      string `json:"memo"`
	StoreName string `json:"storeName"`
}

// AuthCodeJSONBody defines parameters for AuthCode.
type AuthCodeJSONBody AuthCode

// CreateEventJSONBody defines parameters for CreateEvent.
type CreateEventJSONBody CreateEvent

// UpdateEventJSONBody defines parameters for UpdateEvent.
type UpdateEventJSONBody UpdateEvent

// JoinJSONBody defines parameters for Join.
type JoinJSONBody Register

// LoginGoogleJSONBody defines parameters for LoginGoogle.
type LoginGoogleJSONBody AuthGoogle

// LoginMailJSONBody defines parameters for LoginMail.
type LoginMailJSONBody AuthMail

// RegisterPatternJSONBody defines parameters for RegisterPattern.
type RegisterPatternJSONBody Pattern

// UpdatePatternJSONBody defines parameters for UpdatePattern.
type UpdatePatternJSONBody Pattern

// UpdatePrivateJSONBody defines parameters for UpdatePrivate.
type UpdatePrivateJSONBody UpdateEvent

// RegisterUserJSONBody defines parameters for RegisterUser.
type RegisterUserJSONBody Register

// SendMailJSONBody defines parameters for SendMail.
type SendMailJSONBody SendMail

// AuthCodeRequestBody defines body for AuthCode for application/json ContentType.
type AuthCodeJSONRequestBody AuthCodeJSONBody

// CreateEventRequestBody defines body for CreateEvent for application/json ContentType.
type CreateEventJSONRequestBody CreateEventJSONBody

// UpdateEventRequestBody defines body for UpdateEvent for application/json ContentType.
type UpdateEventJSONRequestBody UpdateEventJSONBody

// JoinRequestBody defines body for Join for application/json ContentType.
type JoinJSONRequestBody JoinJSONBody

// LoginGoogleRequestBody defines body for LoginGoogle for application/json ContentType.
type LoginGoogleJSONRequestBody LoginGoogleJSONBody

// LoginMailRequestBody defines body for LoginMail for application/json ContentType.
type LoginMailJSONRequestBody LoginMailJSONBody

// RegisterPatternRequestBody defines body for RegisterPattern for application/json ContentType.
type RegisterPatternJSONRequestBody RegisterPatternJSONBody

// UpdatePatternRequestBody defines body for UpdatePattern for application/json ContentType.
type UpdatePatternJSONRequestBody UpdatePatternJSONBody

// UpdatePrivateRequestBody defines body for UpdatePrivate for application/json ContentType.
type UpdatePrivateJSONRequestBody UpdatePrivateJSONBody

// RegisterUserRequestBody defines body for RegisterUser for application/json ContentType.
type RegisterUserJSONRequestBody RegisterUserJSONBody

// SendMailRequestBody defines body for SendMail for application/json ContentType.
type SendMailJSONRequestBody SendMailJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (POST /auth-code)
	AuthCode(ctx echo.Context) error

	// (GET /display-name)
	GetDisplayName(ctx echo.Context) error

	// (POST /display-name)
	UpdateDisplayName(ctx echo.Context) error

	// (GET /event)
	GetAllEvent(ctx echo.Context) error

	// (POST /event)
	CreateEvent(ctx echo.Context) error

	// (DELETE /event/${id})
	DeleteEvent(ctx echo.Context, id int) error

	// (GET /event/${id})
	GetOneEvent(ctx echo.Context, id int) error

	// (PUT /event/${id})
	UpdateEvent(ctx echo.Context, id int) error
	// 参加するグループの親のユーザ名を取得
	// (GET /get_name/${group})
	GetParentName(ctx echo.Context, group string) error

	// (GET /health-check)
	HealthCheck(ctx echo.Context) error

	// (GET /invite)
	Invite(ctx echo.Context) error

	// (GET /is-parent)
	IsParent(ctx echo.Context) error
	// 共有グループに参加
	// (POST /join)
	Join(ctx echo.Context) error
	// ログインしているかチェック
	// (GET /login-check)
	LoginCheck(ctx echo.Context) error
	// Googleアカウントでログイン
	// (POST /login-google)
	LoginGoogle(ctx echo.Context) error
	// メールアドレスでログイン
	// (POST /login-mail)
	LoginMail(ctx echo.Context) error
	// ログアウト処理
	// (GET /logout)
	Logout(ctx echo.Context) error

	// (GET /pattern)
	GetPattern(ctx echo.Context) error

	// (POST /pattern)
	RegisterPattern(ctx echo.Context) error

	// (DELETE /pattern/${id})
	DeletePattern(ctx echo.Context, id int) error

	// (PUT /pattern/${id})
	UpdatePattern(ctx echo.Context, id int) error

	// (GET /private)
	GetAllPrivate(ctx echo.Context) error

	// (DELETE /private/${id})
	DeletePrivate(ctx echo.Context, id int) error

	// (GET /private/${id})
	GetOnePrivate(ctx echo.Context, id int) error

	// (PUT /private/${id})
	UpdatePrivate(ctx echo.Context, id int) error
	// ユーザの新規登録
	// (POST /register)
	RegisterUser(ctx echo.Context) error

	// (GET /resend-code)
	ResendCode(ctx echo.Context) error

	// (GET /revision)
	Revision(ctx echo.Context) error

	// (POST /send-mail)
	SendMail(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// AuthCode converts echo context to params.
func (w *ServerInterfaceWrapper) AuthCode(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AuthCode(ctx)
	return err
}

// GetDisplayName converts echo context to params.
func (w *ServerInterfaceWrapper) GetDisplayName(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetDisplayName(ctx)
	return err
}

// UpdateDisplayName converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateDisplayName(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UpdateDisplayName(ctx)
	return err
}

// GetAllEvent converts echo context to params.
func (w *ServerInterfaceWrapper) GetAllEvent(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetAllEvent(ctx)
	return err
}

// CreateEvent converts echo context to params.
func (w *ServerInterfaceWrapper) CreateEvent(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateEvent(ctx)
	return err
}

// DeleteEvent converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteEvent(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteEvent(ctx, id)
	return err
}

// GetOneEvent converts echo context to params.
func (w *ServerInterfaceWrapper) GetOneEvent(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetOneEvent(ctx, id)
	return err
}

// UpdateEvent converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateEvent(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UpdateEvent(ctx, id)
	return err
}

// GetParentName converts echo context to params.
func (w *ServerInterfaceWrapper) GetParentName(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "group" -------------
	var group string

	err = runtime.BindStyledParameter("simple", false, "group", ctx.Param("group"), &group)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter group: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetParentName(ctx, group)
	return err
}

// HealthCheck converts echo context to params.
func (w *ServerInterfaceWrapper) HealthCheck(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.HealthCheck(ctx)
	return err
}

// Invite converts echo context to params.
func (w *ServerInterfaceWrapper) Invite(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.Invite(ctx)
	return err
}

// IsParent converts echo context to params.
func (w *ServerInterfaceWrapper) IsParent(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.IsParent(ctx)
	return err
}

// Join converts echo context to params.
func (w *ServerInterfaceWrapper) Join(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.Join(ctx)
	return err
}

// LoginCheck converts echo context to params.
func (w *ServerInterfaceWrapper) LoginCheck(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.LoginCheck(ctx)
	return err
}

// LoginGoogle converts echo context to params.
func (w *ServerInterfaceWrapper) LoginGoogle(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.LoginGoogle(ctx)
	return err
}

// LoginMail converts echo context to params.
func (w *ServerInterfaceWrapper) LoginMail(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.LoginMail(ctx)
	return err
}

// Logout converts echo context to params.
func (w *ServerInterfaceWrapper) Logout(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.Logout(ctx)
	return err
}

// GetPattern converts echo context to params.
func (w *ServerInterfaceWrapper) GetPattern(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPattern(ctx)
	return err
}

// RegisterPattern converts echo context to params.
func (w *ServerInterfaceWrapper) RegisterPattern(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.RegisterPattern(ctx)
	return err
}

// DeletePattern converts echo context to params.
func (w *ServerInterfaceWrapper) DeletePattern(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeletePattern(ctx, id)
	return err
}

// UpdatePattern converts echo context to params.
func (w *ServerInterfaceWrapper) UpdatePattern(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UpdatePattern(ctx, id)
	return err
}

// GetAllPrivate converts echo context to params.
func (w *ServerInterfaceWrapper) GetAllPrivate(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetAllPrivate(ctx)
	return err
}

// DeletePrivate converts echo context to params.
func (w *ServerInterfaceWrapper) DeletePrivate(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeletePrivate(ctx, id)
	return err
}

// GetOnePrivate converts echo context to params.
func (w *ServerInterfaceWrapper) GetOnePrivate(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetOnePrivate(ctx, id)
	return err
}

// UpdatePrivate converts echo context to params.
func (w *ServerInterfaceWrapper) UpdatePrivate(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UpdatePrivate(ctx, id)
	return err
}

// RegisterUser converts echo context to params.
func (w *ServerInterfaceWrapper) RegisterUser(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.RegisterUser(ctx)
	return err
}

// ResendCode converts echo context to params.
func (w *ServerInterfaceWrapper) ResendCode(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ResendCode(ctx)
	return err
}

// Revision converts echo context to params.
func (w *ServerInterfaceWrapper) Revision(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.Revision(ctx)
	return err
}

// SendMail converts echo context to params.
func (w *ServerInterfaceWrapper) SendMail(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SendMail(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.POST("/auth-code", wrapper.AuthCode)
	router.GET("/display-name", wrapper.GetDisplayName)
	router.POST("/display-name", wrapper.UpdateDisplayName)
	router.GET("/event", wrapper.GetAllEvent)
	router.POST("/event", wrapper.CreateEvent)
	router.DELETE("/event/$:id", wrapper.DeleteEvent)
	router.GET("/event/$:id", wrapper.GetOneEvent)
	router.PUT("/event/$:id", wrapper.UpdateEvent)
	router.GET("/get_name/$:group", wrapper.GetParentName)
	router.GET("/health-check", wrapper.HealthCheck)
	router.GET("/invite", wrapper.Invite)
	router.GET("/is-parent", wrapper.IsParent)
	router.POST("/join", wrapper.Join)
	router.GET("/login-check", wrapper.LoginCheck)
	router.POST("/login-google", wrapper.LoginGoogle)
	router.POST("/login-mail", wrapper.LoginMail)
	router.GET("/logout", wrapper.Logout)
	router.GET("/pattern", wrapper.GetPattern)
	router.POST("/pattern", wrapper.RegisterPattern)
	router.DELETE("/pattern/$:id", wrapper.DeletePattern)
	router.PUT("/pattern/$:id", wrapper.UpdatePattern)
	router.GET("/private", wrapper.GetAllPrivate)
	router.DELETE("/private/$:id", wrapper.DeletePrivate)
	router.GET("/private/$:id", wrapper.GetOnePrivate)
	router.PUT("/private/$:id", wrapper.UpdatePrivate)
	router.POST("/register", wrapper.RegisterUser)
	router.GET("/resend-code", wrapper.ResendCode)
	router.GET("/revision", wrapper.Revision)
	router.POST("/send-mail", wrapper.SendMail)

}

